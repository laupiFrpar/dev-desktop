#!/bin/sh

if ! test -d "$HOME/.web-development-machine"; then
  mkdir "$HOME/.web-development-machine"
fi

root="$HOME/.web-development-machine"
shell_file="$HOME/.bash_profile"
config_file="$root/config"

cd $root

curl --remote-name https://raw.githubusercontent.com/laupiFrpar/web-development-machine/master/functions
curl --remote-name https://raw.githubusercontent.com/laupiFrpar/web-development-machine/master/Brewfile

source "$root/functions"

if ! test -e "$config_file"; then
  touch "$config_file"
fi

if ! test -e "$shell_file"; then
  fancy_echo "Creating a bash profile ..."
  touch "$shell_file"
else
  mv -f "$shell_file" "$shell_file-bak"
  touch "$shell_file"
fi

source $config_file

if ! test -d "$HOME/bin"; then
  mkdir "$HOME/bin"
fi

# Install brew
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
  append_to_file "$shell_file" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

# Remove brew-cask since it is now installed as part of brew tap caskroom/cask.
# See https://github.com/caskroom/homebrew-cask/releases/tag/v0.60.0
if brew_is_installed 'brew-cask'; then
  brew uninstall --force 'brew-cask'
fi

if tap_is_installed 'caskroom/versions'; then
  brew untap caskroom/versions
fi

fancy_echo "Updating Homebrew ..."
cd "$(brew --repo)" && git fetch && git reset --hard origin/master && brew update

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "Review the Homebrew messages to see if any action is needed."
fi

fancy_echo "Installing formulas and casks from the Brewfile ..."
if test -e "$root/Brewfile"; then
  if brew bundle --file="$root/Brewfile"; then
    fancy_echo "All formulas and casks were installed successfully."
  else
    fancy_echo "Some formulas or casks failed to install."
    echo "This is usually due to one of the Mac apps being already installed,"
    echo "in which case, you can ignore these errors."
  fi
fi

fancy_echo "Updating Rubygems ..."
gem update --system

if ! gem_is_installed 'sass'; then
  fancy_echo "Installing Sass ..."
  gem install sass
else
  fancy_echo "Sass already installed. Skipping ..."
fi

# Install PHP
current_version_php=$(brew list | egrep '^php\d{2}$')

if ! test -z $current_version_php; then
  echo "The PHP version $current_version_php is installed."
  prompt="Would you change the version ? "
else
  new_version_php=$(brew search php | cut -d'/' -f 3 | egrep '^php\d{2}$' | tail -n1)
  echo "We will install $new_version_php"
  prompt="Would you change the version to install ? "
fi

echo -n $prompt "[yn] "
read -r -n 1 response_change_version

if ! test -z $response_change_version && ([ $response_change_version == 'y' ] || [ $response_change_version == 'Y' ]); then
  echo ''
  echo ''
  echo 'Available versions : '
  echo ''
  brew search php | cut -d'/' -f 3 | egrep '^php\d{2}$'
  echo ''
  echo -n "Which version do you want to install ? "
  read -r new_version_php
  
  if ! test -z $current_version_php; then
    echo "Delete $current_version_php"
  fi
fi

if ! test -z $new_version_php; then
  fancy_echo "Installing PHP ..."
  brew install $new_version_php
elif ! test -z $current_version_php
  fancy_echo "PHP '$current_version_php' already installed. Skipping ..."
fi

# Install Composer
if ! test -e /usr/local/bin/composer; then
  fancy_echo "Installing Composer ..."
  expected_signature=$(wget -q -O - https://composer.github.io/installer.sig)
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  actual_signature=$(php -r "echo hash_file('SHA384', 'composer-setup.php');")

  if [ "$expected_signature" != "$actual_signature" ]; then
    fancy_echo "ERROR: Invalid installer signature"
    rm composer-setup.php
    echo "Problem with the installer of the composer"
    echo "Composer is not installed ..."
  else
    php composer-setup.php --quiet
    rm composer-setup.php
    mv composer.phar /usr/local/bin/composer
  fi
else
  fancy_echo "Composer already installed. Skipping ..."
fi

composer_install_or_update('bamarni/symfony-console-autocomplete')

# Configure the git
fancy_echo "Configuring your git ..."
if test -z $git_config_user_name; then
  echo -n "Your name :"
  read -r git_config_user_name
  append_to_file "$config_file" "git_config_user_name=$git_config_user_name"
fi

if test -z $git_config_user_email; then
  echo -n "Your email : "
  read -r git_config_user_email
  append_to_file "$config_file" "git_config_user_email=$git_config_user_email"
fi

if ! command git config --get user.name $git_config_user_name > /dev/null ; then
  git config --global user.name "$git_config_user_name"
fi

if ! command git config --get user.email $git_config_user_email > /dev/null ; then
  git config --global user.email $git_config_user_email
fi

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.del-merged-branch '!git branch --merged | egrep -v "(\*|master|develop)" | xargs git branch -d'
git config --global alias.edit-conflicted-files '!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; $EDITOR `f`'
git config --global alias.add-conflicted-files '!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`'

if ! test -d "$HOME/.ssh"; then
  fancy_echo "Configuring your SSH ..."
  ssh-keygen -t rsa -b 4096 -C "$git_config_user_email"
fi

# Install Oh My Git
if ! test -d "$HOME/.web-development-environment"; then
  fancy_echo "Instaling Oh My Git..."
  git clone https://github.com/arialdomartini/oh-my-git.git $HOME/.oh-my-git
else
  fancy_echo "Updating Oh My Git..."
  cd $HOME/.oh-my-git
  git remote update && git pull
fi

fancy_echo "Configuring your bash ..."

append_to_file "$shell_file" 'if test -e "$HOME/.profile"; then'
append_to_file "$shell_file" '  source "$HOME/.profile"'
append_to_file "$shell_file" 'fi'
append_to_file "$shell_file" 'brew_path=$(brew --prefix)'
append_to_file "$shell_file" 'export PATH="$HOME/bin:$HOME/.composer/vendor/bin:$brew_path/opt/node@5/bin:$brew_path/bin:$brew_path/sbin:$PATH"'
append_to_file "$shell_file" "export PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[1;33m\]\w\[\033[31m\]\$(__git_ps1)\[\033[00m\]\$ '"
append_to_file "$shell_file" 'export EDITOR="mate -w"'
append_to_file "$shell_file" 'alias ll="ls -l"'
append_to_file "$shell_file" 'source $brew_path/opt/git/etc/bash_completion.d/git-completion.bash'
append_to_file "$shell_file" 'source $brew_path/opt/git/etc/bash_completion.d/git-prompt.sh'
append_to_file "$shell_file" 'source "$HOME/.oh-my-git/prompt.sh"'
append_to_file "$shell_file" 'source $brew_path/etc/bash_completion'
append_to_file "$shell_file" 'eval "$(symfony-autocomplete)"'

fancy_echo "Configuring your vim ..."

if ! test -f $HOME/.vimrc; then
  touch $HOME/.vimrc
fi

append_to_file "$HOME/.vimrc" "set ruler"

fancy_echo 'All done!'